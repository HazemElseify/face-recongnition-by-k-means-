# demonstrate face detection on 5 Celebrity Faces Dataset
import logging
logging.getLogger('tensorflow').disabled = True
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # or any {'0', '1', '2'}
import tensorflow as tf
tf.get_logger().setLevel('INFO')
from os import listdir
from os.path import isdir
from PIL import Image
from numpy import asarray
import numpy as np
from matplotlib import pyplot
from mtcnn.mtcnn import MTCNN
from keras.models import load_model
from numpy import load
from numpy import expand_dims
from numpy import asarray
from numpy import savez_compressed
from keras.models import load_model
from sklearn.cluster import KMeans
model=load_model('C:/Users/hazem/PycharmProjects/pythonProject2/facenet_keras.h5')
# extract a single face from a given photograph
def extract_face(filename, required_size=(160, 160)):
    # load image from file
    image = Image.open(filename)
    # convert to RGB, if needed
    image = image.convert('RGB')
    # convert to array
    pixels = asarray(image)
    detector = MTCNN() # extract the faces from image
    # detect faces in the image
    results = detector.detect_faces(pixels)
    # extract the bounding box from the first face
    x1, y1, width, height = results[0]['box']
    # bug fix
    x1, y1 = abs(x1), abs(y1)
    x2, y2 = x1 + width, y1 + height
    # extract the face
    face = pixels[y1:y2, x1:x2]
    # resize pixels to the model size
    image = Image.fromarray(face)
    image = image.resize(required_size)
    face_array = asarray(image)
    return face_array
def load_faces(directory):
	faces = list()
	# enumerate files
	for filename in listdir(directory):
		# path
		path = directory + filename
		# get face
		face = extract_face(path)
		# store
		faces.append(face)
	return asarray(faces)
#model we use ***face net model***
def get_embedding(model, face_pixels):
	# scale pixel values
	face_pixels = face_pixels.astype('float32')
	# standardize pixel values across channels (global)
	mean, std = face_pixels.mean(), face_pixels.std()
	face_pixels = (face_pixels - mean) / std
	# transform face into one sample
	samples = expand_dims(face_pixels, axis=0)
	# make prediction to get embedding
	yhat = model.predict(samples)
	return yhat[0].tolist()
def convertingToEmbedds(faces):
    embedds=list()
    for face in faces:
        embedd=get_embedding(model,face)
        embedds.append(embedd)
    return asarray(embedds)
faces=load_faces('C:/Users/hazem/PycharmProjects/pythonProject2/train/')
converted=convertingToEmbedds(faces)
kmeans=KMeans(n_clusters=5, max_iter=1000, algorithm ='auto')
kmeans.fit(converted)
array=kmeans.labels_
array2=list()
print(array)
#ben=array[0],elton=array[1],mindy=array[2],jerry=array[4],madona=array[5]
directory='C:/Users/hazem/PycharmProjects/pythonProject2/val/ben_afflek/'
for filename in listdir(directory):
        path = directory + filename
        predictface=extract_face(path)
        embedded=get_embedding(model,predictface)
        result=kmeans.predict([embedded])
        print(result)
        
